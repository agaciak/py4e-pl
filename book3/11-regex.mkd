Wyrażenia regularne
===================

Do tej pory odczytywaliśmy dane poprzez pliki, szukaliśmy wzorców i wyodrębnialiśmy różne fragmenty linii, które wydawały nam się interesujące. Używaliśmy metod związanych z ciągami znaków, takich jak `split` i `find`, a także używaliśmy list i wycinania fragmentów napisów do wyodrębnienia części linii.

\index{regular expressions}
\index{regex}
\index{re module}

Zadanie wyszukiwania i wyodrębniania jest tak często wykonywane, że Python ma bardzo wszechstronną i wydajną bibliotekę o nazwie *wyrażenia regularne*, która dość elegancko radzi sobie z tymi zadaniami. Powodem, dla którego nie wprowadziliśmy wcześniej w książce wyrażeń regularnych jest to, że choć mają dużo możliwości i są bardzo przydatne, to niestety są trochę skomplikowane, a przyzwyczajenie się do ich składnia wymaga trochę czasu.

Wyrażenia regularne są prawie własnym, małym językiem programowania do wyszukiwania i parsowania ciągów znaków. W rzeczywistości, o wyrażeniach regularnych napisano już wiele książek. W tym rozdziale zajmiemy się tylko podstawami wyrażeń regularnych. Więcej szczegółów na temat wyrażeń regularnych znajdziesz na stronie:

<https://pl.wikipedia.org/wiki/Wyrażenie_regularne>

<https://docs.python.org/library/re.html>

Biblioteka wyrażeń regularnych `re` musi być zaimportowana w Twoim programie, zanim będziesz mógł z niej korzystać. Najprostszym wykorzystaniem biblioteki wyrażeń regularnych jest funkcja `search()`. Poniższy program demonstruje jej proste użycie.

\index{regex!search}

\VerbatimInput{../code3/re01.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Otwieramy plik, przechodzimy przez każdą linię i używamy wyrażenia regularnego w `search()` do wypisania tylko tych linii, które zawierają napis "From:". Powyższy program nie wykorzystuje prawdziwej mocy wyrażeń regularnych, ponieważ równie łatwo mogliśmy użyć `line.find()` do uzyskania tego samego wyniku.

\index{string!find}

Moc wyrażeń regularnych ujawnia się wtedy, gdy dodajemy do ciągu znaków wyszukiwania specjalne znaki, które pozwalają nam dokładniej kontrolować to, które linie pasują do tego napisu. Dodanie tych specjalnych znaków do naszego wyrażenia regularnego pozwala nam na wyrafinowane dopasowanie i ekstrakcję danych przy jednoczesnym zachowaniu bardzo małej ilości kodu.

Na przykład, znak karety (tzw. daszek) jest używany w wyrażeniach regularnych by dopasować "początek" linii. Moglibyśmy w następujący sposób zmienić nasz program na dopasowywanie tylko tych linii, w których "From:" było na początku linii:

\VerbatimInput{../code3/re02.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Teraz będziemy dopasowywać tylko te linie, które *zaczynają się od* ciągu znaków "From:". Jest to wciąż bardzo prosty przykład, który mogliśmy zrealizować równoważnie przy pomocy metody `startswith()` dla ciągów znaków. Jednak wspomniany wyżej symbol służy tylko do zwrócenia uwagi, że wyrażenia regularne zawierają specjalne znaki akcji, które dają nam większą kontrolę nad tym, co będzie pasować do wyrażenia regularnego.

\index{string!startswith}

Dopasowywanie znaków w wyrażeniach regularnych
----------------------------------------------

Istnieje wiele innych specjalnych znaków, które pozwalają nam budować jeszcze bardziej wyrafinowane wyrażenia regularne. Najczęściej używanym znakiem specjalnym jest kropka, która dopasowuje każdy znak.

\index{wild card}
\index{regex!wild card}

W poniższym przykładzie, wyrażenie regularne `F...m:` pasuje do któregokolwiek z ciągów znaków "From:", "Fxxm:", "F12m:" lub "F!@m:", ponieważ kropka w wyrażeniu regularnym oznacza dopasowanie dowolnego znaku.

\VerbatimInput{../code3/re03.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Takie wyrażenie regularne ma szczególnie dużą moc, gdy przy pomocy `*` lub `+` poszerzy się je o możliwością wskazania, że dany znak może być powtórzony dowolną liczbę razy. Te znaki specjalne oznaczają, że zamiast dopasowywać pojedynczy znak we wzorcu wyszukiwania, dopasowują zero lub więcej znaków (w przypadku asteryksa/gwiazdki) lub jeden lub więcej znaków (w przypadku plusa).

W poniższym przykładzie możemy jeszcze bardziej zawęzić linie, które dopasowujemy, używając powtarzającego się *wieloznacznika* (symbolu wieloznacznego, symbolu maski):

\VerbatimInput{../code3/re04.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Wzorzec wyszukiwania `^From:.+@` pomyślnie dopasuje te linie, które zaczynają się od "From:", po których następuje jeden lub więcej znaków (`.+`) i po których następuje znak małpy `@`. Zatem będzie on pasował do następującej linii:

~~~~
From: stephen.marquard@uct.ac.za
~~~~

Możesz myśleć o symbolu wieloznacznym `.+` jako o rozszerzeniu, które dopasowuje wszystkie znaki między znakiem dwukropka a znakiem mapły.

~~~~
From:.+@
~~~~

Dobrze jest też myśleć o plusie i gwiazdce jako o znakach "ekspansywnych". Na przykład, następujący wzorzec dopasowuje tekst aż do ostatniego znaku mapły w napisie, jako że `.+` wypycha na zewnątrz:

~~~~
From: stephen.marquard@uct.ac.za, csev@umich.edu, and cwen @iupui.edu
~~~~

Poprzez dodanie kolejnego znaku można też wskazać, że znak gwiazdki lub plusa nie ma być aż tak "chciwy". Więcej informacji na temat wyłączania chciwego zachowania tych znaków znajduje się w dokumentacji.

\index{greedy}

Wyciąganie danych przy użyciu wyrażeń regularnych
-------------------------------------------------

Jeśli w Pythonie chcemy wyodrębnić dane z ciągu znaków, to możemy użyć metody `findall()` do wyciągnięcia wszystkich podciągów, które pasują do wyrażenia regularnego. Użyjemy przykładu, w którym w dowolnej linii chcemy wyodrębnić wszystko to, co wygląda jak adres email, niezależnie od jej formatu. Na przykład, chcemy wyodrębnić adresy email z każdej z poniższych linii:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
          for <source@collab.sakaiproject.org>;
Received: (from apache@localhost)
Author: stephen.marquard@uct.ac.za
~~~~

Nie chcemy pisać specjalnego kodu dla każdego z typów linii oraz różnego dzielenia i wycinania napisów dla przeczególnych typów linii. Następujący program używa `findall()` do znalenia linii z adresami mailowymi i do wyciągnięcia jednego lub więcej adresów mailowych z tych linii.

\index{findall}
\index{regex!findall}

\VerbatimInput{../code3/re05.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Metoda `findall()` przeszukuje napis podany w drugim argumencie i zwraca listę wszystkich ciągnów znaków, które wyglądają jak adresy e-mail. Używamy sekwencji dwuznakowej, która oznacza dopasowanie dowolnego znaku, który nie jest tzw. biały znakiem^[Przypomnijmy, że jest to zbiorcze określenie takich znaków jak spacja, znak tabulacji, znak końca linii lub dowolny inny znak niemający kształtu na ekranie.] (`\S`).

Wynik programu jest następujący:

~~~~
['csev@umich.edu', 'cwen@iupui.edu']
~~~~

Tłumacząc wyrażenie regularne na ludzki język, szukamy podciągów, które zawierają co najmniej jeden *niebiały* znak, po którym następuje znak małpy, po którym następuje co najmniej jeszcze jeden niebiały znak. `\S+` dopasowuje tyle niebiałych znaków, ile to możliwe.

Wyrażenie regularne pasuje dwukrotnie (csev@umich.edu i cwen@iupui.edu), ale nie pasuje do napisuje "@2PM", ponieważ nie ma w nim żadnych niebiałych znaków *przed* znakiem małpy. Możemy w następujący sposób użyć tego wyrażenia regularnego by odczytać wszystkie linie w pliku i wypisać wszystko to, co wygląda jak adres e-mail:

\VerbatimInput{../code3/re06.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Czytamy każdą linie, a następnie wyodrębniamy wszystkie podciągi, które pasują do naszego wyrażenia regularnego. Ponieważ `findall()` zwraca listę, po prostu sprawdzamy czy liczba elementów na tej liście jest większa od zera, tak by wypisać tylko te linie, w których znaleźliśmy przynajmniej jeden podciąg wyglądający jak adres e-mail.

Jeśli uruchomimy program na pliku *mbox.txt*, otrzymamy następujący wynik:

~~~~
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['<postmaster@collab.sakaiproject.org>']
['<200801032122.m03LMFo4005148@nakamura.uits.iupui.edu>']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['apache@localhost)']
['source@collab.sakaiproject.org;']
~~~~

Niektóre z naszych adresów e-mail mają nieprawidłowe znaki, takie jak "<" lub ";" na początku lub na końcu. Zaznaczmy w programie, że interesuje nas tylko ta część napisu, która zaczyna i kończy się literą lub cyfrą.

Aby to zrobić, używamy innej cechy wyrażeń regularnych. Kwadratowe nawiasy są używane do wskazania zbioru akceptowalnych znaków, które jesteśmy skłonni rozważyć jako pasujące. W pewnym sensie, `\S` prosi o dopasowanie zestawu "niebiałych znaków". Teraz będziemy nieco dokładniejsi, jeśli chodzi o znaki, które będziemy dopasowywać.

Oto nasze nowe wyrażenie regularne:

~~~~
[a-zA-Z0-9]\S*@\S*[a-zA-Z]
~~~~

Robi się to trochę skomplikowane i możesz zacząć widzieć, dlaczego wyrażenia regularne są własnym, małym językiem. Tłumacząc to wyrażenie regularne na ludzki język, szukamy podciągów, które rozpoczynają się *pojedynczą* małą literą, dużą literą lub liczbą "[a-zA-Z0-9]", po których następuje zero lub więcej niebiałych znaków (`\S*`), po których następuje znak małpy, po których następuje zero lub więcej niebiałych znaków (`\S*`), po których następuje duża lub mała litera. Zauważ, że zmieniliśmy znak `+` na `*`, tak by wskazać zero lub więcej niebiałych znaków, ponieważ `[a-zA-Z0-9]` jest już jednym niebiałym znakiem. Pamiętaj, że `*` lub `+` odnosi się do pojedynczego znaku znajdującego się bezpośrednio po lewej stronie plusa lub gwiazdki.

\index{regex!character sets(brackets)}

Jeśli użyjemy tego wyrażenia regularnego w naszym programie, nasze dane są bardziej przyzwoite:

\VerbatimInput{../code3/re07.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

~~~~
...
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['postmaster@collab.sakaiproject.org']
['200801032122.m03LMFo4005148@nakamura.uits.iupui.edu']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['apache@localhost']
~~~~

Zauważ, że w liniach `source@collab.sakaiproject.org`, nasze wyrażenie regularne wyeliminowało dwa znaki na końcu napisu (">;"). Dzieje się tak dlatego, że kiedy dołączamy `[a-zA-Z]` na końcu naszego wyrażenia regularnego, wymagamy by jakikolwiek ciąg znaków, który znajdzie parser wyrażenia regularnego, musiał kończyć się literą. Więc kiedy parser widzi ">" na końcówce "sakaiproject.org>;", to po prostu zatrzymuje się na ostatniej znalezionej "pasującej" literze (w tym przypadku "g" było ostatnim dobrym dopasowaniem).

Zauważ również, że wynik programu jest listą Pythona, która ma ciąg znaków jako pojedynczy element listy.



Combining searching and extracting
----------------------------------

If we want to find numbers on lines that start with the string "X-" such
as:

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
~~~~

we don't just want any floating-point numbers from any lines. We only
want to extract numbers from lines that have the above syntax.

We can construct the following regular expression to select the lines:

~~~~
^X-.*: [0-9.]+
~~~~

Translating this, we are saying, we want lines that start with `X-`,
followed by zero or more characters (`.*`), followed by a colon (`:`)
and then a space. After the space we are looking for one or more
characters that are either a digit (0-9) or a period `[0-9.]+`. Note
that inside the square brackets, the period matches an actual period
(i.e., it is not a wildcard between the square brackets).

This is a very tight expression that will pretty much match only the
lines we are interested in as follows:

\VerbatimInput{../code3/re10.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When we run the program, we see the data nicely filtered to show only
the lines we are looking for.

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
X-DSPAM-Confidence: 0.6178
X-DSPAM-Probability: 0.0000
~~~~

But now we have to solve the problem of extracting the numbers. While it
would be simple enough to use `split`, we can use another
feature of regular expressions to both search and parse the line at the
same time.

\index{string!split}

Parentheses are another special character in regular expressions. When
you add parentheses to a regular expression, they are ignored when
matching the string. But when you are using `findall()`,
parentheses indicate that while you want the whole expression to match,
you only are interested in extracting a portion of the substring that
matches the regular expression.

\index{regex!parentheses}
\index{parentheses!regular expression}

So we make the following change to our program:

\VerbatimInput{../code3/re11.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Instead of calling `search()`, we add parentheses around the
part of the regular expression that represents the floating-point number
to indicate we only want `findall()` to give us back the
floating-point number portion of the matching string.

The output from this program is as follows:

~~~~
['0.8475']
['0.0000']
['0.6178']
['0.0000']
['0.6961']
['0.0000']
..
~~~~

The numbers are still in a list and need to be converted from strings to
floating point, but we have used the power of regular expressions to
both search and extract the information we found interesting.

As another example of this technique, if you look at the file there are
a number of lines of the form:

~~~~
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
~~~~

If we wanted to extract all of the revision numbers (the integer number
at the end of these lines) using the same technique as above, we could
write the following program:

\VerbatimInput{../code3/re12.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Translating our regular expression, we are looking for lines that start
with `Details:`, followed by any number of characters (`.*`), followed
by `rev=`, and then by one or more digits. We want to find lines that
match the entire expression but we only want to extract the integer
number at the end of the line, so we surround `[0-9]+` with parentheses.

When we run the program, we get the following output:

~~~~
['39772']
['39771']
['39770']
['39769']
...
~~~~

Remember that the `[0-9]+` is "greedy" and it tries to make as large a
string of digits as possible before extracting those digits. This
"greedy" behavior is why we get all five digits for each number. The
regular expression library expands in both directions until it
encounters a non-digit, or the beginning or the end of a line.

Now we can use regular expressions to redo an exercise from earlier in
the book where we were interested in the time of day of each mail
message. We looked for lines of the form:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

and wanted to extract the hour of the day for each line. Previously we
did this with two calls to `split`. First the line was split
into words and then we pulled out the fifth word and split it again on
the colon character to pull out the two characters we were interested
in.

While this worked, it actually results in pretty brittle code that is
assuming the lines are nicely formatted. If you were to add enough error
checking (or a big try/except block) to insure that your program never
failed when presented with incorrectly formatted lines, the code would
balloon to 10-15 lines of code that was pretty hard to read.

We can do this in a far simpler way with the following regular
expression:

~~~~
^From .* [0-9][0-9]:
~~~~

The translation of this regular expression is that we are looking for
lines that start with `From ` (note the space), followed by any number
of characters (`.*`), followed by a space, followed by two digits
`[0-9][0-9]`, followed by a colon character. This is the definition of
the kinds of lines we are looking for.

In order to pull out only the hour using `findall()`, we add
parentheses around the two digits as follows:

~~~~
^From .* ([0-9][0-9]):
~~~~

This results in the following program:

\VerbatimInput{../code3/re13.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When the program runs, it produces the following output:

~~~~
['09']
['18']
['16']
['15']
...
~~~~

Escape character
----------------

Since we use special characters in regular expressions to match the
beginning or end of a line or specify wild cards, we need a way to
indicate that these characters are "normal" and we want to match the
actual character such as a dollar sign or caret.

We can indicate that we want to simply match a character by prefixing
that character with a backslash. For example, we can find money amounts
with the following regular expression.

~~~~ {.python}
import re
x = 'We just received $10.00 for cookies.'
y = re.findall('\$[0-9.]+',x)
~~~~

Since we prefix the dollar sign with a backslash, it actually matches
the dollar sign in the input string instead of matching the "end of
line", and the rest of the regular expression matches one or more digits
or the period character. *Note:* Inside square brackets,
characters are not "special". So when we say `[0-9.]`, it really means
digits or a period. Outside of square brackets, a period is the
"wild-card" character and matches any character. Inside square brackets,
the period is a period.

Summary
-------

While this only scratched the surface of regular expressions, we have
learned a bit about the language of regular expressions. They are search
strings with special characters in them that communicate your wishes to
the regular expression system as to what defines "matching" and what is
extracted from the matched strings. Here are some of those special
characters and character sequences:

`^` Matches the beginning of the line.

`$` Matches the end of the line.

`.` Matches any character (a wildcard).

`\s` Matches a whitespace character.

`\S` Matches a non-whitespace character (opposite of \\s).

`*` Applies to the immediately preceding character(s) and indicates to match
zero or more times.

`*?` Applies to the immediately preceding character(s) and indicates to
match zero or more times in "non-greedy mode".

`+` Applies to the immediately preceding character(s) and indicates to match
one or more times.

`+?` Applies to the immediately preceding character(s) and indicates to
match one or more times in "non-greedy mode".

`?` Applies to the immediately preceding character(s) and indicates to match
zero or one time.

`??` Applies to the immediately preceding character(s) and indicates to
match zero or one time in "non-greedy mode".

`[aeiou]` Matches a single character as long as that character is in the
specified set. In this example, it would match "a", "e", "i", "o", or
"u", but no other characters.

`[a-z0-9]` You can specify ranges of characters using the minus sign. This
example is a single character that must be a lowercase letter or a
digit.

`[^A-Za-z]` When the first character in the set notation is a caret, it
inverts the logic. This example matches a single character that is
anything *other than* an uppercase or lowercase letter.

`( )` When parentheses are added to a regular expression, they are ignored
for the purpose of matching, but allow you to extract a particular
subset of the matched string rather than the whole string when using
`findall()`.

`\b` Matches the empty string, but only at the start or end of a word.

`\B` Matches the empty string, but not at the start or end of a word.

`\d` Matches any decimal digit; equivalent to the set [0-9].

`\D` Matches any non-digit character; equivalent to the set [^0-9].

Bonus section for Unix / Linux users
------------------------------------

Support for searching files using regular expressions was built into the
Unix operating system since the 1960s and it is available in nearly all
programming languages in one form or another.

\index{grep}

As a matter of fact, there is a command-line program built into Unix
called *grep* (Generalized Regular Expression Parser)
that does pretty much the same as the `search()` examples in
this chapter. So if you have a Macintosh or Linux system, you can try
the following commands in your command-line window.

~~~~ {.bash}
$ grep '^From:' mbox-short.txt
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
~~~~

This tells `grep` to show you lines that start with the
string "From:" in the file *mbox-short.txt*. If you
experiment with the `grep` command a bit and read the
documentation for `grep`, you will find some subtle
differences between the regular expression support in Python and the
regular expression support in `grep`. As an example,
`grep` does not support the non-blank character
`\S` so you will need to use the slightly more complex set
notation `[^ ]`, which simply means match a character that is anything
other than a space.

Debugging
---------

Python has some simple and rudimentary built-in documentation that can
be quite helpful if you need a quick refresher to trigger your memory
about the exact name of a particular method. This documentation can be
viewed in the Python interpreter in interactive mode.

You can bring up an interactive help system using `help()`.

~~~~ {.python}
>>> help()

help> modules
~~~~

If you know what module you want to use, you can use the
`dir()` command to find the methods in the module as follows:

~~~~ {.python .trinket}
>>> import re
>>> dir(re)
[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',
'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',
'sre_parse', 'sub', 'subn', 'sys', 'template']
~~~~

You can also get a small amount of documentation on a particular method
using the dir command.

~~~~ {.python .trinket}
>>> help (re.search)
Help on function search in module re:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
>>>
~~~~

The built-in documentation is not very extensive, but it can be helpful
when you are in a hurry or don't have access to a web browser or search
engine.

Glossary
--------

brittle code
:   Code that works when the input data is in a particular format but is
    prone to breakage if there is some deviation from the correct
    format. We call this "brittle code" because it is easily broken.

greedy matching
:   The notion that the `+` and `*` characters in a regular expression
    expand outward to match the largest possible string.
\index{greedy}
\index{greedy matching}

grep
:   A command available in most Unix systems that searches through text
    files looking for lines that match regular expressions. The command
    name stands for "Generalized Regular Expression Parser".
\index{grep}

regular expression
:   A language for expressing more complex search strings. A regular
    expression may contain special characters that indicate that a
    search only matches at the beginning or end of a line or many other
    similar capabilities.

wild card
:   A special character that matches any character. In regular
    expressions the wild-card character is the period.
\index{wild card}

Exercises
---------

**Exercise 1: Write a simple program to simulate the operation of the
`grep` command on Unix. Ask the user to enter a regular
expression and count the number of lines that matched the regular
expression:**

~~~~
$ python grep.py
Enter a regular expression: ^Author
mbox.txt had 1798 lines that matched ^Author

$ python grep.py
Enter a regular expression: ^X-
mbox.txt had 14368 lines that matched ^X-

$ python grep.py
Enter a regular expression: java$
mbox.txt had 4175 lines that matched java$
~~~~

**Exercise 2: Write a program to look for lines of the form:**

~~~~
New Revision: 39772
~~~~

**Extract the number from each of the lines using a regular expression
and the `findall()` method. Compute the average of the
numbers and print out the average as an integer.**

~~~~
Enter file:mbox.txt
38549

Enter file:mbox-short.txt
39756
~~~~
