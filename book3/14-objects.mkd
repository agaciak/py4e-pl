Programowanie obiektowe
=======================

Zarządzanie większymi programami
--------------------------------

\index{object-oriented}

Na początku książki omówiliśmy cztery podstawowe wzorce programowania, których używamy do tworzenia programów:

* Kod sekwencyjny
* Kod warunkowy (instrukcje `if`)
* Kod powtarzalny (pętle)
* Zapisanie i ponowne użycie (funkcje)

W późniejszych rozdziałach analizowaliśmy proste zmienne, jak również struktury danych, takie jak listy, krotki i słowniki.

Podczas tworzenia programów, projektujemy struktury danych i piszemy kod służący do operowania tymi strukturami danych. Istnieje wiele sposobów pisania programów i prawdopodobnie do tej pory napisałeś już kilka programów, które nie są "zbyt eleganckie", oraz kilka innych programów, które są "bardziej eleganckie". Mimo to, że Twoje programy mogą być małe, to zapewne zaczynasz dostrzegać, że pisanie kodu wymaga odrobiny sztuki i estetyki.

W miarę jak programy stają się długie na miliony wierszy, coraz ważniejsze staje się pisanie kodu, który jest łatwy do zrozumienia. Jeśli pracujesz nad programem o długości miliona linii, nigdy nie możesz mieć w tym samym czasie w głowie całego programu. Potrzebujemy sposobów, aby rozbić duże programy na wiele mniejszych kawałków, tak abyśmy mieli mniej kodu do przeglądania podczas rozwiązywania jakiegoś problemu, naprawiania błędów lub dodawania nowych funkcji.

W pewnym sensie, programowanie obiektowe jest sposobem na uporządkowanie kodu tak, abyś mógł skupić się na jego 50 liniach i go zrozumieć, ignorując na chwilę pozostałe 999 950 linii kodu.

Rozpoczęcie pracy
-----------------

Podobnie jak w przypadku wielu innych aspektów programowania, konieczne jest poznanie koncepcji programowania obiektowego, zanim będzie można je skutecznie wykorzystać. Powinieneś podejść do tego rozdziału jako do sposobu na poznanie niektórych terminów i pojęć oraz powinieneś popracować z kilkoma prostymi przykładami, aby stworzyć podstawy do dalszej nauki.

Kluczowym rezultatem tego rozdziału jest podstawowe zrozumienie, jak konstruowane są obiekty i jak one funkcjonują, a co najważniejsze, jak wykorzystujemy możliwości obiektów, które są nam dostarczane przez Pythona i jego biblioteki.

Korzystanie z obiektów
----------------------

Jak się okazuje, w tej książce przez cały czas używaliśmy obiektów. Python dostarcza nam wiele wbudowanych obiektów. Oto prosty kod, w którym kilka pierwszych linii powinno być dla Ciebie w pewien sposób naturalnych i bardzo łatwych do zrozumienia.

\index{list object}

\VerbatimInput{../code3/party1.py}

Zamiast skupiać się na tym, co te linie ostatecznie realizują, spójrzmy na to, co *naprawdę* dzieje się w tym kodzie z punktu widzenia programowania obiektowego. Nie martw się, jeśli poniższe akapity nie mają dla Ciebie żadnego sensu gdy pierwszy raz je czytasz, ponieważ nie zdefiniowaliśmy jeszcze wszystkich tych terminów.

Pierwsza linia *konstruuje* obiekt typu `list`, druga i trzecia *wywołuje metodę* `append()`, czwarta linia wywołuje metodę `sort()`, a piąta linia *pobiera* (*wyszukuje*) element z pozycji 0.

Szósta linia wywołuje metodę `__getitem__()` na liście `stuff` z parametrem zero.

~~~~ {.python}
print (stuff.__getitem__(0))
~~~~

Siódma linia jest jeszcze bardziej rozwlekłym sposobem na odzyskanie elementu z zerowej pozycji listy `stuff`.

~~~~ {.python}
print (list.__getitem__(stuff,0))
~~~~

W powyższym fragmencie kodu wywołujemy metodę `__getitem__` w klasie `list` i *przekazujemy* jako parametry listę oraz pozycję elementu, który chcemy pobrać z tej listy.

Ostatnie trzy wiersze programu są równoważne, ale wygodniej jest po prostu użyć składni używającej nawiasów kwadratowych, tak aby wyszukać element znajdujący się na konkretnym miejscu listy.

Możemy przyjrzeć się możliwościom danego obiektu, patrząc na wynik funkcji `dir()`:

    >>> stuff = list()
    >>> dir(stuff)
    ['__add__', '__class__', '__contains__', '__delattr__',
    '__delitem__', '__dir__', '__doc__', '__eq__',
    '__format__', '__ge__', '__getattribute__', '__getitem__',
    '__gt__', '__hash__', '__iadd__', '__imul__', '__init__',
    '__iter__', '__le__', '__len__', '__lt__', '__mul__',
    '__ne__', '__new__', '__reduce__', '__reduce_ex__',
    '__repr__', '__reversed__', '__rmul__', '__setattr__',
    '__setitem__', '__sizeof__', '__str__', '__subclasshook__',
    'append', 'clear', 'copy', 'count', 'extend', 'index',
    'insert', 'pop', 'remove', 'reverse', 'sort']
    >>>

Pozostała część tego rozdziału zdefiniuje wszystkie powyższe terminy, więc pamiętaj by po jego zakończeniu wrócić do tej sekcji i ponownie przeczytać powyższe akapity, tak aby sprawdzić czy je rozumiesz.

Zaczynając od programów...
--------------------------

Program w swojej najbardziej podstawowej formie pobiera pewną ilość danych wejściowych, przetwarza je i wytwarza pewną ilość danych wyjściowych. Nasz program do konwersji numerów pięter pokazuje bardzo krótki, ale kompletny program pokazujący wszystkie te trzy kroki.

\VerbatimInput{../code3/elev.py}

Jeśli zastanowimy trochę dłużej nad tym programem, to zauważymy, że istnieje "świat zewnętrzny" oraz nasz program. Aspekty wejściowe i wyjściowe są tymi miejcami, w których program wchodzi w interakcję ze światem zewnętrznym. Wewnątrz programu mamy kod i dane do wykonania zadania, do którego jest przeznaczony ten program.

![Program](height=1.20in@../images/program)

Jednym ze sposobów na myślenie o programowaniu obiektowym jest rozdzielenie naszego programu na wiele "stref". Każda strefa zawiera pewien kod i dane (jak program) oraz ma dobrze zdefiniowane interakcje ze światem zewnętrznym i innymi strefami w programie.

Jeśli spojrzymy ponownie na aplikację do wyodrębniania linków, w której korzystaliśmy z biblioteki BeautifulSoup, to możemy zobaczyć program, który jest skonstruowany poprzez złączenie różnych obiektów w celu wykonania tego zadania:

\index{BeautifulSoup}
\index{HTML}
\index{parsing!HTML}

\VerbatimInput{../code3/urllinks.py}

Wczytujemy adres URL do zmiennej przchowującej ciąg znaków, a następnie przekazujemy ją do `urllib`, tak aby pobrać dane z sieci. Biblioteka `urllib` wykorzystuje w rzeczywistości bibliotekę `socket` do nawiązania połączenia z siecią w celu pobrania danych. Bierzemy ciąg znaków, który zwraca `urllib`, i przekazujemy go do BeautifulSoup do dalszej analizy. BeautifulSoup korzysta z obiektu `html.parser`^[https://docs.python.org/3/library/html.parser.html] i w wyniku też zwraca nam obiekt. Na zwróconym obiekcie wywołujemy metodę `tags()`, która zwraca słownik obiektów będących znacznikami. Przechodzimy w pętli po znacznikach i dla każdego znacznika wywołujemy metodę `get()`, tak aby wypisać jego atrybut `href`.

Możemy narysować dla tego programu diagram z oznaczeniem jak te obiekty ze sobą współpracują.

![Program jako sieć obiektów](height=1.50in@../images/program-oo)

W tym przypadku kluczowe nie jest idealne zrozumienie jak ten program działa, ale zobaczenie jak w celu stworzenia programu budujemy sieć współdziałających ze sobą obiektów i zarządzamy pomiędzy nimi przepływem informacji. Ważne jest również zauważenie, że gdy kilka rozdziałów temu natrafiłeś na ten program, to mogłeś w pełni zrozumieć co się w nim dzieje, nawet nie zdając sobie sprawy z tego, że program "zarządzał przepływem danych pomiędzy obiektami". To były po prostu tylko linie kodu, które wykonały dane zadanie.

Subdividing a problem
---------------------

One of the advantages of the object-oriented approach is that it can
hide complexity. For example, while we need to know how to use the
`urllib` and BeautifulSoup code, we do not need to know how those libraries
work internally. This allows us to focus on the part of the problem we need to
solve and ignore the other parts of the program.

![Ignoring Detail When Using an Object](height=1.50in@../images/program-oo-code)

This ability to focus exclusively on the part of a program that we care about
and ignore the rest is also helpful to the developers of the objects that we use.
For example, the programmers developing BeautifulSoup do not need to
know or care about how we retrieve our HTML page, what parts we want to
read, or what we plan to do with the data we extract from the web page.

![Ignoring Detail When Building an Object](height=1.50in@../images/program-oo-bs4)

Our first Python object
-----------------------

At a basic level, an object is simply some code plus data structures that are
smaller than a whole program. Defining a function allows us to store
a bit of code and give it a name and then later invoke that code using the
name of the function.

An object can contain a number of functions (which we call *methods*) as
well as data that is used by those functions.  We call data items that are
part of the object *attributes*.

\index{class keyword}

We use the `class` keyword to define the data and code that will make up each
of the objects. The class keyword includes the name of the class and begins
an indented block of code where we include the attributes (data)
and methods (code).

\VerbatimInput{../code3/party2.py}

Each method looks like a function, starting with the `def` keyword and
consisting of an indented block of code.  This object has one attribute (`x`)
and one method (`party`).  The methods have a special first parameter that
we name by convention `self`.

Just as the `def` keyword does not cause function code to be executed, the
`class` keyword does not create an object.  Instead, the `class`
keyword defines a template indicating what data and code will be contained
in each object of type `PartyAnimal`.  The class is like a cookie cutter
and the objects created using the class are the
cookies^[Cookie image copyright CC-BY
https://www.flickr.com/photos/dinnerseries/23570475099].
You don't put frosting on the cookie cutter;
you put frosting on the cookies, and you can put different frosting
on each cookie.

![A Class and Two Objects](height=2.0in@../photos/cookie_cutter_flickr_Didriks)

If we continue through this sample program, we see the first executable line of
code:

~~~~ {.python}
an = PartyAnimal()
~~~~

\index{construct}
\index{object}
\index{instance}
\index{class}

This is where we instruct Python to construct (i.e., create) an *object* or
*instance* of the class `PartyAnimal`. It looks like a function call to the
class itself. Python constructs the object with the right data and methods
and returns the object which is then assigned to the variable `an`.
In a way this is quite similar to the following line which we have
been using all along:

~~~~ {.python}
counts = dict()
~~~~

Here we instruct Python to construct an object using the `dict` template
(already present in Python), return the instance of dictionary,
and assign it to the variable `counts`.

When the `PartyAnimal` class is used to construct an object, the variable `an`
is used to point to that object.  We use `an` to access the code and data for that
particular instance of the `PartyAnimal` class.

Each Partyanimal object/instance contains within it a variable `x`
and a method/function named `party`. We call the `party` method in this line:

~~~~ {.python}
an.party()
~~~~

When the `party` method is called, the first parameter (which we call by convention `self`)
points to the particular instance of the PartyAnimal object that `party` is called from.
Within the `party` method, we see the line:

~~~~ {.python}
self.x = self.x + 1
~~~~

This syntax using the *dot* operator is saying 'the x within self.' Each time `party()` is
called, the internal `x` value is incremented by 1 and the value is printed out.

The following line is another way to call the `party` method within the `an`
object:

~~~~ {.python}
PartyAnimal.party(an)
~~~~

In this variation, we access the code from within the class and explicitly
pass the object pointer `an` as the first parameter (i.e., `self` within the method).
You can think of `an.party()` as shorthand for the above line.

When the program executes, it produces the following output:

~~~~
So far 1
So far 2
So far 3
So far 4
~~~~

The object is constructed, and the `party` method is called four times, both
incrementing and printing the value for `x` within the `an` object.

Classes as types
----------------

\index{dir}
\index{type}

As we have seen, in Python all variables have a type.  We can use the built-in
`dir` function to examine the capabilities of a variable.  We can also use `type` and
`dir` with the classes that we create.

\VerbatimInput{../code3/party3.py}

When this program executes, it produces the following output:

~~~~
Type <class '__main__.PartyAnimal'>
Dir  ['__class__', '__delattr__', ...
'__sizeof__', '__str__', '__subclasshook__',
'__weakref__', 'party', 'x']
Type <class 'int'>
Type <class 'method'>
~~~~

You can see that using the `class` keyword, we have created a new type.
From the `dir` output, you can see both the `x` integer attribute and the `party`
method are available in the object.

Object lifecycle
----------------

\index{constructor}
\index{destructor}
\index{object lifecycle}

In the previous examples, we define a class (template), use that class
to create an instance of that class (object), and then use the instance.  When
the program finishes, all of the variables are discarded.  Usually, we don't think
much about the creation and destruction of variables, but often as our objects
become more complex, we need to take some action within the object to set things
up as the object is constructed and possibly clean things up as the object is
discarded.

If we want our object to be aware of these moments of construction and destruction,
we add specially named methods to our object:

\VerbatimInput{../code3/party4.py}

When this program executes, it produces the following output:

~~~~
I am constructed
So far 1
So far 2
I am destructed 2
an contains 42
~~~~

As Python constructs our object, it calls our `__init__` method to
give us a chance to set up some default or initial values for the object.
When Python encounters the line:

~~~~
an = 42
~~~~

It actually "thows our object away" so it can reuse the `an` variable
to store the value `42`.  Just at the moment when our `an` object is
being "destroyed" our destructor code (`__del__`) is called.  We cannot
stop our variable from being destroyed, but we can do any necessary
cleanup right before our object no longer exists.

When developing objects, it is quite common to add a constructor to an object
to set up initial values for the object. It is relatively rare to need a
destructor for an object.

Multiple instances
------------------

So far, we have defined a class, constructed a single object, used
that object, and then thrown the object away. However, the real power
in object-oriented programming happens when we construct multiple instances
of our class.

When we construct multiple objects from our class, we might want to set
up different initial values for each of the objects. We can
pass data to the constructors to give each object a different initial
value:

\VerbatimInput{../code3/party5.py}

The constructor has both a `self` parameter that points to the object instance
and additional parameters that are passed into the constructor as the
object is constructed:

~~~~
s = PartyAnimal('Sally')
~~~~

Within the constructor, the second line copies the parameter (`nam`) that is
passed into the `name` attribute within the object instance.

~~~~
self.name = nam
~~~~

The output of the program shows that each of the objects (`s` and `j`) contain their own
independent copies of `x` and `nam`:

~~~~
Sally constructed
Jim constructed
Sally party count 1
Jim party count 1
Sally party count 2
~~~~

Inheritance
-----------

Another powerful feature of object-oriented programming is the ability to
create a new class by extending an existing class.  When extending a class,
we call the original class the *parent class* and the new class the
*child class*.

For this example, we move our `PartyAnimal` class into its own file.
Then, we can 'import' the `PartyAnimal` class in a new file and extend it, as follows:

\VerbatimInput{../code3/party6.py}

When we define the `CricketFan` class, we indicate that we are extending
the `PartyAnimal` class.  This means that all of the variables (`x`) and methods
(`party`) from the `PartyAnimal` class are *inherited* by the `CricketFan` class.
For example, within the `six` method in the `CricketFan` class, we 
call the `party` method from the `PartyAnimal` class.

As the program executes, we create `s` and `j` as independent instances
of `PartyAnimal` and `CricketFan`. The `j` object has additional capabilities beyond
the `s` object.

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
['__class__', '__delattr__', ... '__weakref__',
'name', 'party', 'points', 'six', 'x']
~~~~

In the `dir` output for the `j` object (instance of the `CricketFan` class), we see
that it has the attributes and methods of the parent class, as well as the attributes
and methods that were added when the class was extended to create the `CricketFan` class.

Summary
-------

This is a very quick introduction to object-oriented programming that focuses mainly
on terminology and the syntax of defining and using objects.
Let's quickly review the code that we looked at in the beginning of the chapter.
At this point you should fully understand what is going on.

\VerbatimInput{../code3/party1.py}

The first line constructs a `list` *object*.  When Python creates the `list` object,
it calls the *constructor* method (named `__init__`) to set up the internal
data attributes that will be used to store the list data. We have not passed any
parameters to the *constructor*. When the constructor returns, we use the variable
`stuff` to point to the returned instance of the `list` class.

The second and third lines call the `append` method
with one parameter to add a new item at the end of the list by updating the
attributes within `stuff`.  Then in the fourth line,
we call the `sort` method with no parameters to sort the data within the `stuff`
object.

We then print out the first item in the list using the square brackets which are
a shortcut to calling the `__getitem__` method within the `stuff`.  This
is equivalent to calling the `__getitem__` method in the `list` *class*
and passing the `stuff` object as the first parameter and the position
we are looking for as the second parameter.

At the end of the program, the `stuff` object is discarded but not before
calling the *destructor* (named `__del__`) so that the object can clean up any
loose ends as necessary.

Those are the basics of object-oriented programming. There are many additional details
as to how to best use object-oriented approaches when developing large applications
and libraries that are beyond the scope of this chapter.^[If
you are curious about where the `list` class is defined, take a look
at (hopefully the URL won't change)
https://github.com/python/cpython/blob/master/Objects/listobject.c -
the list class is written in a language
called "C". If you take a look at that source code and find it curious
you might want to explore a few Computer Science courses.]

Glossary
--------

attribute
:   A variable that is part of a class.
\index{attribute}

class
:   A template that can be used to construct an object.  Defines
    the attributes and methods that will make up the object.
\index{class}

child class
:   A new class created when a parent class is extended.  The child class
    inherits all of the attributes and methods of the parent class.
\index{child class}

constructor
:   An optional specially named method (`__init__`) that is called at the
    moment when a class is being used to construct an object.
    Usually this is used to set up initial values for the object.
\index{constructor}

destructor
:   An optional specially named method (`__del__`) that is called at the
    moment just before an object is destroyed.  Destructors are rarely
    used.
\index{destructor}

inheritance
:   When we create a new class (child) by extending an
    existing class (parent).  The child class has all the attributes
    and methods of the parent class plus additional attributes and
    methods defined by the child class.
\index{inheritance}

method
:   A function that is contained within a class and the objects
    that are constructed from the class.  Some object-oriented
    patterns use 'message' instead of 'method' to describe this concept.
\index{method}
\index{message}

object
:   A constructed instance of a class.  An object contains all of
    the attributes and methods that were defined by the class.
    Some object-oriented documentation uses the term 'instance'
    interchangeably with 'object'.
\index{method}

parent class
:   The class which is being extended to create a new child class.
    The parent class contributes all of its methods and attributes
    to the new child class.
\index{parent class}








