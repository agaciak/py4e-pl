%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 593.000000 218.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.5 (Build 19F101) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 593 218
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 593 218
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /O put
dup 34 /b put
dup 35 /i put
dup 36 /e put
dup 37 /k put
dup 38 /t put
dup 39 /c put
dup 40 /aogonek put
dup 41 /g put
dup 42 /u put
dup 43 /space put
dup 44 /z put
dup 45 /n put
dup 46 /a put
dup 47 /oacute put
dup 48 /w put
dup 49 /W put
dup 50 /y put
dup 51 /j put
dup 52 /sacute put
dup 53 /s put
dup 54 /lslash put
dup 55 /o put
dup 56 /d put
dup 57 /r put
dup 58 /l put
dup 59 /h put
dup 60 /m put
dup 61 /period put
dup 62 /p put
dup 63 /B put
dup 64 /f put
dup 65 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 36 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/B 3 def
/O 4 def
/S 5 def
/W 6 def
/a 7 def
/b 8 def
/c 9 def
/d 10 def
/e 11 def
/f 12 def
/g 13 def
/h 14 def
/i 15 def
/j 16 def
/k 17 def
/l 18 def
/m 19 def
/n 20 def
/o 21 def
/p 22 def
/r 23 def
/s 24 def
/t 25 def
/u 26 def
/w 27 def
/y 28 def
/z 29 def
/oacute 30 def
/acute 31 def
/lslash 32 def
/aogonek 33 def
/sacute 34 def
/uni20BE 35 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68331602326DD9C55699747DE2F3CAF7894474241F5FB6AD8ECBA420D59FE30274CB6C6EA17DAEED9F59F40DF35770D36F932D83113B3C4A0782D297C951BCEEC2B8C983569A1B167CE0A4D71EA58BD2B3A2F00CEA5C824DD96E304BD1B17AD846514BBB2E948ABE199FBA333EB6463C03A174CEBE823BCD77D09F8D6D52F37859351D91629EFBE3F8321BB27FECE83EFF9E2A04DCE076BC4EF70CE249BC9FE47542BB9740F5840177E647C5A8145E30E9C0C73EC3A534B87406D7921B4700B3F407C542DE60B28E66CE9C34DC90A48D0EDA5EC4EE8893EBE9CF1A8F474EC9E0EAFEFEF1405EBFB5272D3611D85800ED886B4D005882390C92ADC0E4C00B3634D753CFD05856F457DD15F4762C031A28378D5FD514CEAEBF23E0FDAC3D9C034175522F709FE85EF4475E52AA533EC890C28917771BE92D296364A02981778A60A06335D1FE3BEC87274EA9A1A61A82FC1DF8267D44E86AED7E0A916BEFE44DEA8A51CDED31E8D7AFA612FFA3D83FF7903FCBCA0516E8D2F7E665391630D8014565FE23C69306B0621D011C29BB8701EE233EF305F8FA35B3C30558105DD28A6B7C79FC3CC5068FCE260A29C2DAA9B91802A88061960790811D2D54F87770C6E048E37834AD10B9A5D31D1B8660AE90F04DF4B501959B9EC43DDA14CDEB1EA95A4BB671E070C075F9675BE8BC4F6557EB5A2B65008A670956FCA31752585CBE1F7CF75B5DD183621FA6480DC1EF7392D0DC21387CE8583C6952C138C97730AF47FC044E43ACC19070884FF7B0C78BC038296677B035B7D13A0D5C89603649429537A6CBD8B
81EFD14F6D89A868BE6985AA62AAA7ED4AD54F27C66D31298D502261D42B0C9F5DB86C3109AFABADFEC82D33E5E2AB6BE5C11CB253F904F0391E9A8B41D7E4570623F8E38FC42D3E48E2B4928AB2C3D7343063AFFD08BE494C1BB3B4DC99D26E455EF4ECE0727D4AAA07B1D1FDD0AD1ADEEEFB26E98F72F7D4B1A3BDCEFB4ABCB0981BA22425D61861DD1D9AE55C928FF2345E9ED2C062D0CDF5A4C23421C85B3DC24F1ED14FF956B06BEEB57F3946DFA895FD6AC36D2B94FBFB151112277544C2EB1096C2360A05FEEABE1F816D34BDE2EE0231CADECC591D4950809844E12123A7E2598C22D63117826F249E8143ED6967198454E2923D13CFE62643ED41648FCEBF034CEA4A2F17BFC07AE33456188892D7DF139C0BB00D39FD22E39831DD36167CF3678791CCD1D6CB9CEBCEF588DB22C12A3B3076F783753DC400DB870DA13BBDF03BD199E1CF6727440D728F4B5DA5E9BA7B1701BF38DE167A9406E0A94C6B963C7956DD3D528962AFE063C8F515413EF298BC53430FBA81120963A4CC2EE8901E198712607D2AB0A076D1A1608F75ABB522A009569E523A9600A5215D2427099B5924606C90EA7A45E34BA27589E6017FB2D3EE60DC336A499C259219A82355EDF91D20E8EAAC1940BF6081E0DB2D0C21F510F39E3B8AC64929F1917D9D5DEA274E6CFD903432CBB92EE4CCF8467E83B8A6E6DB6F69DEA95217D40A623CD8EA6F23921A63014F1E5840A489F8D8DA77596CEDA73D02B3928FC486DFF30BAA7904A29C7D3490EAB2FBC216D39A22ECA5FB3FDFE74D0C89EF7F4F5FE2C784BEAD0257786AFBE5F980E0071A725312E7FBAA66C6C605D33C3723E6D94770C1A1CA7924913A728C3CDC055CB9C86FEAB1DB9E084DEF6E46372544A696ED5F0BA28CF1D5270565C633E369E2863D7630E135216D00843A2845767FBFC5D578FA5C5EB704A927F0BF8D200926A092BC3E4192298BF445AF1E3629DBD3783BD3D4FAF9DC9E3475A2BB8F0A8FBA40D59B0C41CF5D2867D2F028E0EB7AC19A00CBD3C830D84920C05B7BE17CF42CD0E270BA4FFB435CC02C234BCAF2BF51260E7FE2C604A0D993E7839B6F8A4C3AE1CF1E03B0C88786CF05C5DC50F46019AB3FB9F5C209DE667E52050302CC0791D1C6C42BEFC6F345A321F5310162209B974AEBCA600FFB76C7F724FBD60033C66EF4D515DE7B6BE1AEDCEDB9B9AC7D31B503E11470868CF0CDCF606C3FA87A7EA153FBDDA004FFEC11335E14F28147FE1ECAD591CBD92CDE97EFF67BE63D83BB2B333C2537031BE7279B9D6B66CA54349299F83F27AE3D30BBFB609760B2B5D2B97051F34841AA12356E51C9B9AC88AAE12D22EEF60D258642FC8814AC7F5F3FA3C29060670BCA67F3629FCF76403ADB050229AF674A7CB6CB34A792CAD58BA73446EE490D86AE98CD3FD7B4EBFD8D00D59597
0AF939EAE341A65C5113621999D01560354AABCE73E775FC052C482D428A18F047F31FBB915D3F186E1BB52321CBB02DD5A7899BE357EB00B91464A6165DCA775A3C76C4C52E6C6797260E50B972CAE3AFDAB67F29AAD2BEECB7374BA67D6A40F42C849D4E081BBABFB3381A0247EB39E810677D3725B3F97DD73EE1A069F91D54878F631BB6DBF462FC7D82570B6286B842C42BFFC59BF04022A6AF5D3D8AE425091D82430B7B5A16E91C1A39A2324B7B15A64686A65D1CAE120F6620D7600D95E33D362CAB53A75A86968DCF965E9794CFE950A8C3F60F6C4109F1E6F25D24820E2217FEC865B06873A10350421030AE660C1453175D38AA905B4AF015794675032920145F1C758BEB5DCE97580BD04B99B8AA382B82A4F2438970CA58A2694B6E64C7C0E74BBE7C1D9113401156526FC9A4B20385062D635885F611D3FB4C14DFE4EEF4EAE7F7C537DDA358C253DC99D4733172DE6839756D30EC69A5DAF8B0B2125016115AF3729D0100B1EE38152C17494CA2DD02E0C1FAF20DFFB3AC9FC12FE75E90300B120695539B1B28505435C009E6932C29AEC940705541509CFA3687FB7357C657517647CE3772F141546749DA45AFE7423F2FAD3D0F32988DCA6D1DFA89995F19A997569F367A1DD3AC5E65566042D0AF1D8BF5E64A035A075D37B8A07BD433BEFC405E492B62A2138982D9AF9903B1E01F741283BC2F3A08AB3CF424651A425A6C8527FED4ECB82FBEBE739043B28C678F3E52BD56BF627CA57AA39B601C4409FF0226B9687A7B9137AD05B78F1C39F7B6E5F7C23B1434632FD083DB799BE7088A96E58B8B6E34DD796C8B10FD9B6A0DC8E256BC7E1C07496B561DEDC99B48C8FD3787FFC526A070F852CD778ED4DD8C698E344541DD4D69C68B24BA84B1BD1BC0AECA8B81032AA63D620806A8B31E41106510B33DBEC57CFC20BD942C126AE613C948A06D6D88BB94373A471E13C5A2708F1ECE99BCF832E45DC805DF5691FA3438744B44D5F2008ADB5FC72431113396F06DFD271E772944F4B42D709C590EC257200806DF1A1813E6E9A6E1214149DC9C1A44CD43CD69D7709401A255D211E25402C9DDB883E8B60B0A711E29314FA80ED5B040975800CC1B49B1695D5C8D9ABCE681ED38C0D81EDD1430572AD469CD5D73B9B78AA2AF6FB7E0BD1CD9C0772640B1ED2C324FB2A21403C2CF2A2EFF5823E9DEA0F916B1895F33F3524E163C6B9FD02BDD512084AC2D83EFD4B9C80F344F88D3F600D8D7473DBA46BE20611180CE0F00ADF0BAAA7B6F78EE07D039FAC0AA0C45DB0DB31AF79A9AB136B6650B8D8850CFE396A303C443D13513A09379CE161C5482C1FB5919737D0AA677CEA17D3A6B65AB7E7F7FCF97937F91E5E3735FB5808A82ABE03367309F4EF325F95ADD653653EE83B0B00228C4FF67D90CA730949FDFABD5639899

26EA6233C2261DA9571C6080A1B3FCF2CE1A7571854082A90CA61B783F5C8D51299607C45171245818CFD891742365810FE4E43ABB06E1B910430D62D1F67A221613BADFE5D9C9272587C89648D46F4FD175BEF9063BBEEF9206E6667351378472EC93D3F4DBCFD28F5F9820809D7734D422D9DD187C8D4B425F69BF2E7B18FF2F1A10133F09EE22FC9229EB40A89C7CF12FDE48D8F5CD1F907BA283B70C7B2B3D394DF34CBDB1D787379E119CA1418F4B30627FC6A5B44099680C16196D525FBCBDB254630E832BA90FD3ACB8FD1C4A8A20508C0811A6FE2710C55D2236FF619DB0BB42E0327A5D88E422B194E7722E511BF228BEEAA01822288F610D5EC982AE04C93CE76AB76E4E4725C905D53C89A49BEFB477FC75450A74A424524A70F34CA0E822F0DE1C6D91FECEC24E44CB520C3AA627B591BBBFF580B566D45CD217ECEAEBD1856596F679EE9F731B8AFFEC614C6B4C82173FDCC512DA6B3AE3A4FD578812315C7ECCEACF9634DD36ADEDC750291C6C9DBB793D95D1266C25DD1D75E1A34350871974BE0706E37C5971DFA1CFB0FC29AD1D7CF8A2DEB4EBE870BC12C768A99D63C187AAD75499DD41CC51BD3658B7581998B15DE4CF1EFD48A92BC52D09F491DAA0ED32FBF5A51DC9210219488AE489BA46675A18A67B4A4EC07915C1EEF8DD404D9C04A8F1FAEAD75BFC4E6CFB67A37869F58CF22959C68B5D72EB60B26EB56F451149B66BF35F7B50D02E61EB3C3DDA99F3164021C6F8DAC23F8351B8F6EF07323A7A936B38FA7C81977782D67A05ACF9C34B641FB84FA203FE8955696AF61C616026DFD34F9AF841E3607E218259B92776DBACEFBFA74C3C18B2B0E9BABF1AE471B2B558E0E5113A6E7DFB4BD7D37E9991E213CFB2307A08A6E6CE583FD752FAC24E40366AA242EC8DDDAFDA2369689157181775DECA874961D3FF7468458F2EF5DFA7DD2EE2B94F4E3A212A624DC308D583BB2299E04646AE1877BA3372112BD648061A7FF480B68CA5CB24E2A74286BD9DB822E147A064F75BC862B2588E5D3D2B1FDA52908731C4529F79C6C80A740B46D66E4529D3D8C7822ABC3B2D7DF1594994ACFFABD80CEBA8B53788A36E21585AECB6A9F372AFEB6FA94E44435193333C036CD76E9D2B51629388847D01A5BD2D7B26F1D50C87717B65671EAD548C95A72CA6539906C39169D365960DBCD66EA7ED173B84206EC0BFF708E9F614EF43A732F24EE7605D70618383D0DBA98A88989D98D4FAABDA0CC4F00248BE2D2B1B0A200BDE667564C8F87E59BFBC8AB3EC28F742E641F13931303990B2A562C59DA05E64D8FB8F12F7EA225312A669433CE8F8DFADE7304E96FA9EDCD7A9F09C091EB6B5D1AB0706958E7B22C2BBFAB217AC326643BCE947EECBE742156569B8D74509D63E908B6F32BF38CF67CA8B99F6135851C9C88CB64C0B
42584221FBFCAEEE876B930C95AB95F2D792B3C6905C91E3A7938EC9927BD2AC8B235C100ED45AE028510642BC36BB4E1A69BC138B6BB7076236818FA297D05FED0F50D15F91E6AE8E8D9553D35244F59EF84280E2B5DCB9C9B316AFECFC3D13BF03DE864566E4659C7757ADEE5A36F81D8A15CECCCF524439F07D4F2B7FC2F7B3B3196DCA649A1866C199B5D2F923F9E956E12780D6F562115F313B2DB7A879C1D99B618C6CF1B30FDEC8CC83573F4D5CC4BED8CCD8EA4C6505B8DE7A5F1815DA6FB50FFD204A7A90E54BB2E51BE7F00D74EB6E29C330DA81607C0C0432C9357A92066BF3727F5F964156713BA7696C50D3CAF97D281D548AD0D871902B2B4B6B8B1173A63A289E00DA70AD444EC0BEF4D03BE284026C4F8176F4817558B4E8E7E220063D6DBCBF5F6EBECACB85E6139A7F0297B90C8F39FA3DD0721F83ADF7E817E2FCA7AE4DE2F9776283C95AC90AC6905B9A8CEC6731CBA15775E5828631BB52EE2DBFDAF2EF69017B0B591CFD8F2243C2C2FF49FAF9440F0573B65F21DF5B6A5BDD1277362324D01DBAB82E01AA4150E3FA011DE8889070BC0D5AB9C28D9E512D842EEC08E8286CFA1C5685F9785EB4DD009DA1F825D39D5B24CA86BFBC64719C37485591B4CD7CE025362C7C6A305FC8138F69EDF658011C50533E485E54908FC2CAE54E28A9B020CBE08D17E5E654E83B814831995A0CD2769077FA066E05632813A25E513DE6B0683E0CCEBB9DA08E4CFA73DB64AA76B8D9F5966F7029D2683193F551F5100D7EBC0B3169771944C46AC6C915AD4935A1796D9B3B119E585BF7C9C3F0E328396D2DDFA3DA1F0AC310CB5376599AE93DED2863E1702F80844F2A6F9E150A8A7AB2191FC20760C33BF255AA71AE9F6659546093D4A36CACA8D98390C6C9F529DFE7976368DF1A03E2A710EC49D487402BE7A88A0A518814D650F31BBF301D2553983028BCE3BAD379DCD091D3400935450372A98A6166F6409801C743ED8DEDA2BB5E14D2D1ED435B716E3B4123627E265ABFDB1B1E7D035B1D936EBB674379AAA291449336565A9781F20B7BCF8F4E0F9D9A04A732C8AFAF1382F1991B62799F8B2513DC2E842CB0BFD4D545F88BC12CA4FBAF221474D3D3377C803BC7B0647852CF6184960A55BC50A419DC7B263409DA5DDB543F5711CCC6AC499058F2F044993C7F4703FDDD4EB3C506304B55C45333F474697C52CA1A35109CBBCCA71A3DA79A3108B037320C8080F4D38B0E37A6AD938B571B82D37E351C7DC93F4A80AB703D39DF6A5449EC8211A19A85F3FA88D87927F1788722F9ED863BDE1D19B0C8832A87B57C01BD36B4E9671123BC93B8BCBC98589F3A7E247DDA6148BBC0224F8A1D220F9F210926A21954605CF029ADA3F3E9CFA68140EACC37533BA29A54504DFEE4898E645918B6ED68D7977815E72073991C1CE9
D82C611E3CFAE057C970E70C92642CCD95F45A978FD38F90E9E3E408CEA54E461BA313D48C07F35F922854364E59BCC8B9EAA24623916C39D2711A99DC5C755C246D47D961E781055C58DCA56EED88AC2BE566E448B059134936FD032DBCA5997A21E518928968027AFABEE0BF6B4076A02AFBBE6D9C769C862347DB109ECB7C976D3F3FDD0E7EA572E6FB7DB76A7D39EE0C804AC830A6CB035A6C4126C78F7C5219CA4E06E0F6401FFBE8EB3D99591F5A31B030B26BF918F5ED0397D671B7A6D8BC4C103B0A1D3AF33606EA1CADFF2708ED5248CC88531AFD70E37B52E73138B40C1EDF3B69CDA3B4BEA5B070DCEE7D1C8E0A598483D3FC693017DDABFD7EDADB608098A7552513B545B146A5D5339319B701A84C4FDD4FB06AA4FBEB26041E4C9909BDAD1A36C6AC3144C12F36A509181B38A3B2313AB48C2D24F97EECA708B8192AF83DF45F8B416E96EBF8CD2493644DC850AC88EBB3763FE2459617CDF773E39C2F3F4086930CAC03284E8599C52DA16D6EDEE1B047782EBA8189C6B6F33DBB009625A95037EB0F6741EA7C7E0DEF89F61B0E8EE24E2BECC380B82385BFE1155C07E11E4910B0772E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 593 218 rc
0 218 m
593 218 l
593 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-5 226 m
665 226 l
665 -72 l
-5 -72 l
h
-5 226 m
f
103 217 m
220 217 l
220 163 l
103 163 l
h
103 217 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
108 9 m
225 9 l
225 63 l
108 63 l
h
108 9 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
113 29 m
(!"#$%&)[ 12.160000 9.488000 3.552000 8.592000 8.304000 0.000000 ] xS
113 47.447998 m
('#\(\)*+,-.%/0)[ 8.592000 3.552000 8.592000 9.184000 8.896000 4.448000 7.680000 8.896000 8.592000 8.304000 9.184000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
508.66049 35.275425 m
495.49997 35.40757 l
S
0 i
CM
511.6601 190.8049 m
503.63037 193.72443 l
503.69061 187.72473 l
h
511.6601 190.8049 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
516.6601 35.195099 m
508.63037 32.275578 l
508.69061 38.275272 l
h
516.6601 35.195099 m
S
/Cs1 SC
0 sc
/F1.1[ 20 0 0 -20 0 0]sf
523.56 42 m
(1234'#$)[ 18.520000 10.000000 4.440000 10.000000 10.740000 4.440000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
84.302498 35.174217 m
97.600525 35.307812 l
S
0 i
CM
100.60012 190.61182 m
92.630661 193.69203 l
92.570389 187.69234 l
h
100.60012 190.61182 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
105.60012 35.38818 m
97.630661 32.307964 l
97.570389 38.307663 l
h
105.60012 35.38818 m
S
/Cs1 SC
0 sc
10.822502 42 m
(1$34'#$)[ 17.380000 10.740000 4.440000 10.000000 10.740000 4.440000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
247 217 m
346 217 l
346 163 l
247 163 l
h
247 217 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
252 9 m
351 9 l
351 63 l
252 63 l
h
252 9 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
257 29 m
(!"#$%&)[ 12.160000 9.488000 3.552000 8.592000 8.304000 0.000000 ] xS
257 47.447998 m
(5670-#%.)[ 8.000000 3.552000 9.184000 12.128000 8.896000 3.552000 8.304000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
303.57687 73.383987 m
304.47226 89.500771 l
S
0 i
CM
298.13312 160.6037 m
295.58151 152.4496 l
301.57227 152.78242 l
h
298.13312 160.6037 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
303.13312 65.396301 m
300.58151 73.5504 l
306.57227 73.217575 l
h
303.13312 65.396301 m
S
1 J
1 j
0.60000002 i
233.34384 87.937538 m
171 63 l
S
0 i
CM
235.77165 135.09134 m
229.45801 140.8479 l
227.22968 135.27704 l
h
235.77165 135.09134 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
240.77165 90.908661 m
234.45801 85.152107 l
232.22968 90.722969 l
h
240.77165 90.908661 m
S
1 1 1 sc
CM
373 217 m
490 217 l
490 163 l
373 163 l
h
373 217 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
378 9 m
495 9 l
495 63 l
378 63 l
h
378 9 m
S
/Cs1 SC
0 sc
0 i
383 29 m
(!"#$%&)[ 12.160000 9.488000 3.552000 8.592000 8.304000 0.000000 ] xS
383 47.447998 m
('#\(\)*+,-.%/0)[ 8.592000 3.552000 8.592000 9.184000 8.896000 4.448000 7.680000 8.896000 8.592000 8.304000 9.184000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
367.60001 36 m
351.5 36 l
S
0 i
CM
370.60001 190 m
362.60001 193 l
362.60001 187 l
h
370.60001 190 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
375.60001 36 m
367.60001 33 l
367.60001 39 l
h
375.60001 36 m
S
1 1 1 sc
CM
130 55 m
229 55 l
229 1 l
130 1 l
h
130 55 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
135 171 m
234 171 l
234 225 l
135 225 l
h
135 171 m
S
/Cs1 SC
0 sc
0 i
140 191 m
(!"#$%&)[ 12.160000 9.488000 3.552000 8.592000 8.304000 0.000000 ] xS
140 209.448 m
(\)-#.,8.)[ 9.184000 8.896000 3.552000 8.592000 7.680000 9.488000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
158.9109 162.56894 m
151.5891 152.43106 l
S
0 i
CM
141.90518 80.054367 m
144.15706 71.812462 l
149.02113 75.325409 l
h
141.90518 80.054367 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
146.90518 145.94563 m
149.15706 154.18753 l
154.02113 150.67459 l
h
146.90518 145.94563 m
S
CM
158.59482 56.945629 m
156.34294 65.187538 l
151.47887 61.674591 l
h
158.59482 56.945629 m
f
1 0 0 -1 -5 226 cm
163.59482 169.05437 m
161.34294 160.81247 l
156.47887 164.32541 l
h
163.59482 169.05437 m
S
1 1 1 sc
CM
58 136 m
184 136 l
184 82 l
58 82 l
h
58 136 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
63 90 m
189 90 l
189 144 l
63 144 l
h
63 90 m
S
/Cs1 SC
0 sc
0 i
68 110 m
(!"#$%&+*9::#")[ 12.160000 9.488000 3.552000 8.592000 8.304000 5.040000 4.448000 8.896000 5.328000 3.552000 3.552000 3.552000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
144.15102 80.69796 m
148.34898 72.30204 l
S
0 i
CM
146.92668 160.85338 m
140.6657 155.0396 l
146.03226 152.35632 l
h
146.92668 160.85338 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
151.92668 65.146622 m
145.6657 70.960403 l
151.03226 73.643684 l
h
151.92668 65.146622 m
S
CM
135.57332 138.14662 m
141.8343 143.9604 l
136.46774 146.64368 l
h
135.57332 138.14662 m
f
1 0 0 -1 -5 226 cm
140.57332 87.853378 m
146.8343 82.039597 l
141.46774 79.356316 l
h
140.57332 87.853378 m
S
1 1 1 sc
CM
301 55 m
400 55 l
400 1 l
301 1 l
h
301 55 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
306 171 m
405 171 l
405 225 l
306 225 l
h
306 171 m
S
/Cs1 SC
0 sc
0 i
311 191 m
(!"#$%&)[ 12.160000 9.488000 3.552000 8.592000 8.304000 0.000000 ] xS
311 209.448 m
(;&<:=>.95$9)[ 8.896000 5.040000 13.648000 3.552000 4.448000 9.488000 8.592000 5.328000 8.000000 8.592000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
352.99963 163.99965 m
340.35391 151.35391 l
S
0 i
CM
329.69705 80.30294 m
333.2326 72.524773 l
337.47522 76.76741 l
h
329.69705 80.30294 m
f
0 J
0 j
1 0 0 -1 -5 226 cm
334.69705 145.69705 m
338.2326 153.47523 l
342.47522 149.23259 l
h
334.69705 145.69705 m
S
CM
353.65649 56.343502 m
350.12097 64.121681 l
345.87833 59.879036 l
h
353.65649 56.343502 m
f
1 0 0 -1 -5 226 cm
358.65649 169.65649 m
355.12097 161.87833 l
350.87833 166.12096 l
h
358.65649 169.65649 m
S
1 1 1 sc
CM
238 136 m
364 136 l
364 82 l
238 82 l
h
238 136 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -5 226 cm
243 90 m
369 90 l
369 144 l
243 144 l
h
243 90 m
S
/Cs1 SC
0 sc
0 i
248 110 m
(!"#$%&+)[ 12.160000 9.488000 3.552000 8.592000 8.304000 5.040000 0.000000 ] xS
248 128.448 m
(?$.*&#@*:A7*>)[ 10.960000 8.592000 8.592000 8.896000 5.040000 3.552000 4.736000 8.896000 3.552000 10.368000 9.184000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
